MessageNotUnderstood: True class>>True26 October 2015 11:14:33.219 pmVM: Win32 - SmalltalkImage: Squeak5.0 [latest update: #15113]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\Users\Joshua\Desktop\Squeak-5.0-All-in-One\Squeak-5.0-All-in-One\Squeak-5.0-All-in-One.app\Contents\ResourcesTrusted Dir C:\Users\Joshua\Desktop\Squeak-5.0-All-in-One\Squeak-5.0-All-in-One\Squeak-5.0-All-in-One.app\Contents\Resources\JoshuaUntrusted Dir C:\Users\Joshua\Documents\My SqueakTrue class(Object)>>doesNotUnderstand: #True	Receiver: True	Arguments and temporary variables: 		aMessage: 	True		exception: 	MessageNotUnderstood: True class>>True		resumeValue: 	nil	Receiver's instance variables: 		superclass: 	Boolean		methodDict: 	a MethodDictionary(#&->(True>>#& "a CompiledMethod(3730390)") #==>-...etc...		format: 	0		instanceVariables: 	nil		organization: 	('controlling' and: ifFalse: ifFalse:ifTrue: ifTrue: ifTrue:ifFal...etc...		subclasses: 	nil		name: 	#True		classPool: 	a Dictionary()		sharedPools: 	nil		environment: 	nil		category: 	#'Kernel-Objects'UndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	^ m verificaGane True		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(215891)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAnd...etc...		logFlag: 	true		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadStream		aContext: 	nil		receiver: 	nil		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAnd...etc...		logFlag: 	true		theClass: 	UndefinedObject	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCue[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3153236)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 369 and rectangle 130@336 corner: 130@35...etc...		pointBlock: 	a CharacterBlock with index 349 and character $m and rectangle 3@33...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(369 to: 368)		oldInterval: 	(369 to: 368)		typeAhead: 	a WriteStream		styler: 	nilBlockClosure>>on:do:	Receiver: [closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Arguments and temporary variables: 		exception: 	OutOfScopeNotification		handlerAction: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo...etc...		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		startpc: 	133		numArgs: 	0SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aBlock: 	[closure] in SmalltalkEditor(TextEditor)>>printIt		result: 	nil		rcvr: 	nil		ctxt: 	nil	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3153236)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 369 and rectangle 130@336 corner: 130@35...etc...		pointBlock: 	a CharacterBlock with index 349 and character $m and rectangle 3@33...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(369 to: 368)		oldInterval: 	(369 to: 368)		typeAhead: 	a WriteStream		styler: 	nilSmalltalkEditor(TextEditor)>>printIt	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3153236)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 369 and rectangle 130@336 corner: 130@35...etc...		pointBlock: 	a CharacterBlock with index 349 and character $m and rectangle 3@33...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(369 to: 368)		oldInterval: 	(369 to: 368)		typeAhead: 	a WriteStream		styler: 	nilSmalltalkEditor(TextEditor)>>printIt:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aKeyboardEvent: 	[keystroke '<Cmd-p>']	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3153236)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 369 and rectangle 130@336 corner: 130@35...etc...		pointBlock: 	a CharacterBlock with index 349 and character $m and rectangle 3@33...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(369 to: 368)		oldInterval: 	(369 to: 368)		typeAhead: 	a WriteStream		styler: 	nilSmalltalkEditor(TextEditor)>>dispatchOnKeyboardEvent:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aKeyboardEvent: 	[keystroke '<Cmd-p>']		honorCommandKeys: 	true		typedChar: 	$p	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3153236)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 369 and rectangle 130@336 corner: 130@35...etc...		pointBlock: 	a CharacterBlock with index 349 and character $m and rectangle 3@33...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(369 to: 368)		oldInterval: 	(369 to: 368)		typeAhead: 	a WriteStream		styler: 	nilSmalltalkEditor(TextEditor)>>keyStroke:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		anEvent: 	[keystroke '<Cmd-p>']	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3153236)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 369 and rectangle 130@336 corner: 130@35...etc...		pointBlock: 	a CharacterBlock with index 349 and character $m and rectangle 3@33...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(369 to: 368)		oldInterval: 	(369 to: 368)		typeAhead: 	a WriteStream		styler: 	nil[] in [] in TextMorphForEditView(TextMorph)>>keyStroke:	Receiver: a TextMorphForEditView(3153236)	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		bounds: 	0@0 corner: 424@354		owner: 	a TransformMorph(1421118)		submorphs: 	#()		fullBounds: 	0@0 corner: 424@354		color: 	Color black		extension: 	a MorphExtension (3364245) [other:  (indicateKeyboardFocus -> #never...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'ms:= Square new.ms X:100 Y:100.ms on: #click send: setNextV...etc...		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(1790170)		acceptOnCR: 	falseTextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:	Receiver: a TextMorphForEditView(3153236)	Arguments and temporary variables: 		interactionBlock: 	[closure] in [] in TextMorphForEditView(TextMorph)>>keyStroke...etc...		evt: 	[keystroke '<Cmd-p>']		oldEditor: 	a SmalltalkEditor		oldParagraph: 	a NewParagraph		oldText: 	a Text for 'ms:= Square new.ms X:100 Y:100.ms on: #click send: setNe...etc...	Receiver's instance variables: 		bounds: 	0@0 corner: 424@354		owner: 	a TransformMorph(1421118)		submorphs: 	#()		fullBounds: 	0@0 corner: 424@354		color: 	Color black		extension: 	a MorphExtension (3364245) [other:  (indicateKeyboardFocus -> #never...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'ms:= Square new.ms X:100 Y:100.ms on: #click send: setNextV...etc...		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(1790170)		acceptOnCR: 	falseTextMorphForEditView>>handleInteraction:fromEvent:	Receiver: a TextMorphForEditView(3153236)	Arguments and temporary variables: 		interActionBlock: 	[closure] in [] in TextMorphForEditView(TextMorph)>>keyStroke...etc...		evt: 	[keystroke '<Cmd-p>']	Receiver's instance variables: 		bounds: 	0@0 corner: 424@354		owner: 	a TransformMorph(1421118)		submorphs: 	#()		fullBounds: 	0@0 corner: 424@354		color: 	Color black		extension: 	a MorphExtension (3364245) [other:  (indicateKeyboardFocus -> #never...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'ms:= Square new.ms X:100 Y:100.ms on: #click send: setNextV...etc...		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(1790170)		acceptOnCR: 	false[] in TextMorphForEditView(TextMorph)>>keyStroke:	Receiver: a TextMorphForEditView(3153236)	Arguments and temporary variables: 		evt: 	[keystroke '<Cmd-p>']		action: 	nil	Receiver's instance variables: 		bounds: 	0@0 corner: 424@354		owner: 	a TransformMorph(1421118)		submorphs: 	#()		fullBounds: 	0@0 corner: 424@354		color: 	Color black		extension: 	a MorphExtension (3364245) [other:  (indicateKeyboardFocus -> #never...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'ms:= Square new.ms X:100 Y:100.ms on: #click send: setNextV...etc...		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(1790170)		acceptOnCR: 	falseStandardToolSet class>>codeCompletionAround:textMorph:keyStroke:	Receiver: StandardToolSet	Arguments and temporary variables: 		aBlock: 	[closure] in TextMorphForEditView(TextMorph)>>keyStroke:		aTextMorph: 	a TextMorphForEditView(3153236)		evt: 	[keystroke '<Cmd-p>']	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary()		format: 	0		instanceVariables: 	nil		organization: 	('as yet unclassified')		subclasses: 	{CommandLineToolSet}		name: 	#StandardToolSet		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Tools-Base'ToolSet class>>codeCompletionAround:textMorph:keyStroke:	Receiver: ToolSet	Arguments and temporary variables: 		aBlock: 	[closure] in TextMorphForEditView(TextMorph)>>keyStroke:		aTextMorph: 	a TextMorphForEditView(3153236)		evt: 	[keystroke '<Cmd-p>']	Receiver's instance variables: 		superclass: 	AppRegistry		methodDict: 	a MethodDictionary()		format: 	0		instanceVariables: 	nil		organization: 	('as yet unclassified')		subclasses: 	nil		name: 	#ToolSet		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'System-Applications'		registeredClasses: 	an OrderedCollection(StandardToolSet CommandLineToolSet)		default: 	StandardToolSetTextMorphForEditView(TextMorph)>>keyStroke:	Receiver: a TextMorphForEditView(3153236)	Arguments and temporary variables: 		evt: 	[keystroke '<Cmd-p>']	Receiver's instance variables: 		bounds: 	0@0 corner: 424@354		owner: 	a TransformMorph(1421118)		submorphs: 	#()		fullBounds: 	0@0 corner: 424@354		color: 	Color black		extension: 	a MorphExtension (3364245) [other:  (indicateKeyboardFocus -> #never...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'ms:= Square new.ms X:100 Y:100.ms on: #click send: setNextV...etc...		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(1790170)		acceptOnCR: 	false--- The full stack ---True class(Object)>>doesNotUnderstand: #TrueUndefinedObject>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:BlockClosure>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:SmalltalkEditor(TextEditor)>>printItSmalltalkEditor(TextEditor)>>printIt:SmalltalkEditor(TextEditor)>>dispatchOnKeyboardEvent:SmalltalkEditor(TextEditor)>>keyStroke:[] in [] in TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:TextMorphForEditView>>handleInteraction:fromEvent:[] in TextMorphForEditView(TextMorph)>>keyStroke:StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:ToolSet class>>codeCompletionAround:textMorph:keyStroke:TextMorphForEditView(TextMorph)>>keyStroke: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -TextMorphForEditView>>keyStroke:TextMorphForEditView(TextMorph)>>handleKeystroke:KeyboardEvent>>sentTo:TextMorphForEditView(Morph)>>handleEvent:TextMorphForEditView(Morph)>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendKeyboardEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in MorphicProject>>spawnNewProcess[] in BlockClosure>>newProcess